var contractAddress = "TUEtiZtgQMtm5kd1KXEmmkptbVv71mwDod";
var refererDefault = "TZ4rRzPsohyj6PWCK8NLLBNEJpZpXnBuGz";
const urlQueryString = window.location.search;
    const urlParams = new URLSearchParams(urlQueryString);

    var refWallet = (urlParams.get('ref'));

	var userReferer = refWallet;
var language = 'en';
var userAddress = '';
var contractBalanceRate = 0;
var userPercentRate = 0;
var userDividends = 0;
var userTotalDeposits = 0;
var userTotalWithdrawn = 0;
var userAmountOfDeposits = 0;
var userLastDepositTime = 0;

function getFormattedDate(date) {
	let hour = ('0' + date.getUTCHours()).slice(-2);
	let minute = ('0' + date.getUTCMinutes()).slice(-2);
	let day = ('0' + date.getUTCDate()).slice(-2);
	let month = ('0' + (date.getUTCMonth() + 1)).slice(-2);
	let year = date.getUTCFullYear();
	return hour + ':' + minute + ' ' + day + '.' + month + '.' + year
}

function getFormattedNumber(num) {
	var num = num + '';
	var value = Number(num);
	var res = num.split('.');
	if (res[0].length <= 2) {
		return value.toFixed(6)
	} else if (res[0].length == 3) {
		return value.toFixed(5)
	} else if (res[0].length == 4) {
		return value.toFixed(4)
	} else if (res[0].length == 5) {
		return value.toFixed(3)
	} else if (res[0].length == 6) {
		return value.toFixed(2)
	} else if (res[0].length == 7) {
		return value.toFixed(1)
	} else if (res[0].length >= 8) {
		return value.toFixed(0)
	}
}
var abi = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "referrer",
				"type": "address"
			}
		],
		"name": "invest",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserDividends",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserAvailable",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserPercentRate",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getSiteStats",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserReferrer",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "withdraw",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserRefStats",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint24[3]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserTotalDeposits",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "reinvestRoi",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "isActive",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserAmountOfDeposits",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			},
			{
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "getUserDepositInfo",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserCheckpoint",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserTotalWithdrawn",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "reinvest",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"name": "marketingAddr",
				"type": "address"
			},
			{
				"name": "projectAddr",
				"type": "address"
			},
			{
				"name": "reserveAddr",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "user",
				"type": "address"
			}
		],
		"name": "Newbie",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "NewDeposit",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "Withdrawn",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "referrer",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "referral",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "level",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "RefBonus",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "totalAmount",
				"type": "uint256"
			}
		],
		"name": "FeePayed",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "Reinvest",
		"type": "event"
	}
];
$(function () {
	function setUserAddress(address) {
		$('.trxWallet').val(address);
		$('.trxWalletTa125').html('<a href="https://tronfusion.xyz/?ref=' + address + '"><img src="https://tronfusion.xyz/img/125.gif" width="125" height="125" alt="TRONex.net | Get +200% up to your deposit right now. Safe and legit!"></a>');
		$('.trxWalletTa468').html('<a href="https://tronfusion.xyz/?ref=' + address + '"><img src="https://tronfusion.xyz/img/468.gif" width="468" height="60" alt="TRONex.net | Get +200% up to your deposit right now. Safe and legit!"></a>');
		$('.trxWalletTa728').html('<a href="https://tronfusion.xyz/?ref=' + address + '"><img src="https://tronfusion.xyz/img/728.gif" width="728" height="90" alt="TRONex.net | Get +200% up to your deposit right now. Safe and legit!"></a>');
		$('.reflink').html('https://tronfusion.xyz/?ref=' + address);
		$('#reflink').val('https://tronfusion.xyz/?ref=' + address)
	}
	var obj = setInterval(async() => {
		if (window.tronWeb && window.tronWeb.defaultAddress.base58) {
			clearInterval(obj);
			userAddress = window.tronWeb.defaultAddress.base58;
			$('.authFalse').hide();
			$('.authTrue').attr('style', 'display:block !important');
			setUserAddress(userAddress);
			update();
			setTimeout(function () {
				var accountInterval = setInterval(async() => {
					if (window.tronWeb.defaultAddress.base58 !== userAddress) {
						userAddress = window.tronWeb.defaultAddress.base58;
						setUserAddress(userAddress);
						update()
					}
				}, 100)
			}, 5000)
		}
	}, 10);
	async function invest(n) {
		var amount = parseFloat($('.trxAmount' + n).val().replace(',', '.'));
		if (!amount) {
			$('.trxAmountError' + n + '1').show()
		} else if (amount < 100) {
			$('.trxAmountError' + n + '2').show()
		} else {
			amount = Math.floor(amount * 1000000);
			if (!tronWeb.isAddress(userReferer)) {
				userReferer = refererDefault
			}
			try {
				let instance = await tronWeb.contract(abi, contractAddress);
				let res = await instance.invest(userReferer).send({
					callValue: amount
				});
				if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
					$('#goToWallet').trigger('click')
				}
				setTimeout(function () {
					update()
				}, 5000)
			} catch (error) {}
		}
	}
	$(".investButton1").click(function (e) {
		e.preventDefault();
		invest(1);
		return false
	});
	$(".investButton2").click(function (e) {
		e.preventDefault();
		invest(2);
		return false
	});
	$('.trxAmount1').on('input', function () {
		$('.trxAmountError11').hide();
		$('.trxAmountError12').hide()
	});
	$('.trxAmount2').on('input', function () {
		$('.trxAmountError21').hide();
		$('.trxAmountError22').hide()
	});
	async function withdraw() {
		try {
			let instance = await tronWeb.contract(abi, contractAddress);
			let res = await instance.withdraw().send({
				callValue: 0
			});
			if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
				$('#goToWallet').trigger('click')
			}
			setTimeout(function () {
				update()
			}, 5000)
		} catch (error) {}
	}
	$(".withdrawButton").click(function (e) {
		e.preventDefault();
		withdraw();
		return false
	});
	async function reinvest() {
		try {
			let instance = await tronWeb.contract(abi, contractAddress);
			let res = await instance.reinvest().send({
				callValue: 0
			});
			if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
				$('#goToWallet').trigger('click')
			}
			setTimeout(function () {
				update()
			}, 5000)
		} catch (error) {}
	}
	$(".reinvestButton").click(function (e) {
		e.preventDefault();
		reinvest();
		return false
	});
	async function getreinvestRoi() {
		let instance = await tronWeb.contract(abi, contractAddress);
		let res = await instance.reinvestRoi().call();
		reinvestRoi = tronWeb.toDecimal(res);
		reinvestRoi = reinvestRoi/ 10;
		reinvestRoi = reinvestRoi.toFixed(1);
		$('.reinvestPercentRate').html('+' + reinvestRoi + '%');
	}

	async function getSiteStats() {
		await getreinvestRoi();
		let instance = await tronWeb.contract(abi, contractAddress);
		let res = await instance.getSiteStats().call();
		totalInvested = tronWeb.toDecimal(res[0]);
		totalUsers = tronWeb.toDecimal(res[1]);
		contractBalance = tronWeb.toDecimal(res[2]);
		contractBalanceRate = tronWeb.toDecimal(res[3]);
		totalInvested = totalInvested/1000000;
		totalInvested = totalInvested.toFixed(0);
		totalUsers = totalUsers.toFixed(0);
		contractBalance = contractBalance/ 1000000;
		contractBalance = contractBalance.toFixed(0);
		$('.totalInvested').html(totalInvested);
		$('.totalUsers').html(totalUsers);
		$('.contractBalance').html(contractBalance );
		contractBalanceRate = (contractBalanceRate - 20) / 10;
		contractBalanceRate = contractBalanceRate.toFixed(1);
		$('.contractBalanceRate').html('+' + contractBalanceRate + '%');
		$('.contractBalanceRateMain').html('+' + contractBalanceRate + '%')
	}	
	async function getUserPercentRate() {
		await getSiteStats();
		let instance = await tronWeb.contract(abi, contractAddress);
		let res = await instance.getUserPercentRate(userAddress).call();
		userPercentRate = tronWeb.toDecimal(res);
		userPercentRate = userPercentRate / 10;
		userPercentRate = userPercentRate.toFixed(1);
		$('.userPercentRate').html('+' + userPercentRate + '%');
		var basicPercentRate = 2;
		basicPercentRate = basicPercentRate.toFixed(1);
		holdPercentRate = userPercentRate - contractBalanceRate - basicPercentRate - reinvestRoi;
		holdPercentRate = holdPercentRate.toFixed(1);
		$('.holdPercentRate').html('+' + holdPercentRate + '%');
		$('.basicPercentRate').html('+' + basicPercentRate + '%')
	}
	async function getUserDividends() {
		await getUserPercentRate();
		let instance = await tronWeb.contract(abi, contractAddress);
		let res = await instance.getUserDividends(userAddress).call();
		userDividends = tronWeb.toDecimal(res);
		userDividendsTrx = userDividends / 1000000;
		userDividendsTrx = parseFloat(getFormattedNumber(userDividendsTrx));
		$('.userAvailable').html(userDividendsTrx)
	}
	async function getUserTotalWithdrawn() {
		await getUserDividends();
		let instance = await tronWeb.contract(abi, contractAddress);
		let res = await instance.getUserTotalWithdrawn(userAddress).call();
		userTotalWithdrawn = tronWeb.toDecimal(res);
		userTotalWithdrawnTrx = userTotalWithdrawn/ 1000000;
		userTotalWithdrawnTrx = parseFloat(getFormattedNumber(userTotalWithdrawnTrx));
		$('.userTotalWithdrawn').html(userTotalWithdrawnTrx)
		$('.userReferer').html(userReferer);
	}
	async function getUserTotalDeposits() {
		let instance = await tronWeb.contract(abi, contractAddress);
		let res = await instance.getUserTotalDeposits(userAddress).call();
		userTotalDeposits = tronWeb.toDecimal(res);
		userTotalDepositsTrx = userTotalDeposits / 1000000;
		userTotalDepositsTrx = parseFloat(getFormattedNumber(userTotalDepositsTrx));
		$('.userTotalDeposits').html(userTotalDepositsTrx)
	}
async function getUserRefStats() {
		await getUserTotalWithdrawn();
		let instance = await tronWeb.contract(abi, contractAddress);
		let res = await instance.getUserRefStats(userAddress).call();
		userRefsEarned = tronWeb.toDecimal(res[0]);
		userRefsLevel1 = tronWeb.toDecimal(res[1][0]);
		userRefsLevel2 = tronWeb.toDecimal(res[1][1]);
		userRefsLevel3 = tronWeb.toDecimal(res[1][2]);
		userRefsEarnedTrx = userRefsEarned / 1000000;
		userRefsEarnedTrx = parseFloat(getFormattedNumber(userRefsEarnedTrx));
		$('.userRefsEarned').html(userRefsEarnedTrx);
		$('.userRefsLevel1').html(userRefsLevel1);
		$('.userRefsLevel2').html(userRefsLevel2);
		$('.userRefsLevel3').html(userRefsLevel3);
		userTotalEarnedTrx = (userTotalWithdrawn + userDividends + userRefsEarned) / 1000000;
		userTotalEarnedTrx = parseFloat(getFormattedNumber(userTotalEarnedTrx));
				$('.userEarned').html(userTotalEarnedTrx);
	}
	async function getUserAmountOfDeposits() {
		let instance = await tronWeb.contract(abi, contractAddress);
		let res = await instance.getUserAmountOfDeposits(userAddress).call();
		userAmountOfDeposits = tronWeb.toDecimal(res);
		$('.userAmountOfDeposits').html(userAmountOfDeposits)
		
	}
	async function getUserLastDepositTime() {
		await getUserAmountOfDeposits();
		if (userAmountOfDeposits > 0) {
			let instance = await tronWeb.contract(abi, contractAddress);
			let res = await instance.getUserDepositInfo(userAddress, userAmountOfDeposits - 1).call();
			userLastDepositTime = tronWeb.toDecimal(res[2]);
			userLastDepositTimeFormatted = getFormattedDate(new Date(userLastDepositTime * 1000));
			$('.userLastDepositTime').html(userLastDepositTimeFormatted);
			$('.withdrawButton').prop('disabled', false);
			$('.withdrawButton').css('cursor', 'pointer');
			$('.withdrawButton').attr('title', '')
		} else {
			$('.userLastDepositTime').html('no deposits');
			$('.withdrawButton').prop('disabled', true);
			$('.withdrawButton').css('cursor', 'not-allowed');
			$('.withdrawButton').attr('title', 'Please make deposit first!')
		}
	}
	
	async function update() {
		await getUserPercentRate();
		await getUserTotalDeposits();
		await getUserTotalWithdrawn();
		await getUserLastDepositTime();
		await getUserRefStats()
	}
	setInterval(function () {
		/*var contractBalance = $('.contractBalance').data('max');*/
		/*$.ajax({
			url: "/ajax",
			type: "POST",
			data: {
				type: "1"
			},
			dataType: "json",
			success: function (data) {
				if (data[0] != contractBalance) {
					$('.contractBalance').data('max', data[0]);
					$('.totalInvested').data('max', data[1]);
					$('.totalUsers').data('max', data[2]);
					$('.contractBalanceRateMain').html(data[3]);
					if ($('.contractBalanceRate').length > 0) {
						$('.contractBalanceRate').html('+' + parseFloat(data[3]).toFixed(1) + '%')
					}
					animateNumbers()
				}
			}
		});*/
		if (userAddress) {
			update()
		}
	}, 500);
	var clipboard = new ClipboardJS('.buttoncopy');
	$(".numbers").on("keypress keyup blur", function (event) {
		$(this).val($(this).val().replace(/[^0-9\.|\,]/g, ''));
		if (event.which == 44) {
			return true
		}
		if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
			event.preventDefault()
		}
	});

	function calc() {
		var calcDepositAmount = parseFloat($(".calcDepositAmount").val().replace(',', '.'));
		var calcContractBonus = parseFloat($(".calcContractBonus").val().replace(',', '.'));
		$('.calcInputedAmount').html(calcDepositAmount);
		if (!isNaN(calcDepositAmount) && calcDepositAmount >= 100 && !isNaN(calcContractBonus) && calcContractBonus >= 0) {
			var day = 1;
			var perc = 0;
			var bonus = 0;
			var amount = perc * calcDepositAmount / 100;
			var data = '';
			while (amount < calcDepositAmount * 2) {
				perc = 1 + calcContractBonus + bonus / 10;
				amount = amount + (perc * calcDepositAmount / 100);
				if (amount > calcDepositAmount * 2) {
					amount = calcDepositAmount * 2
				}
				data += '<span>' + day + ') +' + perc.toFixed(1) + '% = ' + amount.toFixed(1) + ' TRX</span>';
				day += 1;
				bonus += 1
			}
		} else {
			data = '<br>Please enter correct amount and contract balance bonus percent!'
		}
		$('.calculations').html(data)
	}
	$(".calcDepositAmount,.calcContractBonus").on('keyup change', function () {
		calc()
	});
	if ($(".calcDepositAmount").length > 0) {
		calc()
	}
});